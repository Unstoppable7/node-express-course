1. In this lesson, you created a middleware function called asyncWrapper. Why?
   This function was created as a refactoring of the repetitive use of the try-catch block in the controller functions. It takes advantage of the middleware functionality to implement a function that allows to generalize the use of the try-catch block and error handling.

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

  const getTask = asyncWrapper(async (req, res, next) => {  
    const { id: taskID } = req.params;  
    const task = await Task.findOne({ _id: taskID });  
    if (!task) {  
      return next(createCustomError(`No task with id: ${taskID}`, 404)); 
    }  
    res.status(200).json({ task });  
  }); 
